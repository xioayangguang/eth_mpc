// Code generated by mockery v2.49.1. DO NOT EDIT.

package mocks

import (
	big "math/big"

	ecpointgrouplaw "github.com/getamis/alice/crypto/ecpointgrouplaw"

	mock "github.com/stretchr/testify/mock"
)

// Hasher is an autogenerated mock type for the Hasher type
type Hasher struct {
	mock.Mock
}

// GetN provides a mock function with given fields:
func (_m *Hasher) GetN() *big.Int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetN")
	}

	var r0 *big.Int
	if rf, ok := ret.Get(0).(func() *big.Int); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	return r0
}

// Hash provides a mock function with given fields: input
func (_m *Hasher) Hash(input []byte) (*ecpointgrouplaw.ECPoint, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Hash")
	}

	var r0 *ecpointgrouplaw.ECPoint
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (*ecpointgrouplaw.ECPoint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func([]byte) *ecpointgrouplaw.ECPoint); ok {
		r0 = rf(input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ecpointgrouplaw.ECPoint)
		}
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHasher creates a new instance of Hasher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHasher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Hasher {
	mock := &Hasher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
